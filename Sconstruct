# :mode=python:

# py3
from configparser import RawConfigParser
import os.path
import sys

EnsureSConsVersion(3,0,0)

#-----------------------------------------------------------------------------
# scons switches

AddOption(
    "--coverage",
    action = "store_true",
    default = False,
    help = "Execute unittests and produce html coverage report"
)

AddOption(
    "--test",
    action = "store_true",
    default = False,
    help = "Build and execute unittests"
)

AddOption(
    "--verbose",
    action = "store_true",
    default = False,
    help = "Build in verbose mode"
)

do_test = GetOption("test")

if do_test:

    AddOption(
        "-a",
        "--abort",
        action = "store_true",
        default = False,
        help = "abort at first failure",
    )

#------------------------------------------------------------------------------
# Do parallel builds by default

n_jobs = 1

try:
    import multiprocessing
    n_jobs = multiprocessing.cpu_count()
except:
    pass

SetOption('num_jobs', n_jobs)

print("Building with %d cores" % GetOption('num_jobs'))


#-----------------------------------------------------------------------------
# default configureation

if sys.platform.startswith("linux"):
    default_cfg = dict(
        unittest_env = dict(
            CXX = 'g++',
            CPPPATH = ['external', 'src'],
            CXXFLAGS = ['-std=c++14', '-Wall', '-g', '-O2'],
        ),

        cog_env = dict(),
    )

elif sys.platform in ['win32', 'win64']:

    default_cfg = dict(
        unittest_env = dict(
            CXX = 'cl.exe',
            CPPPATH = ['external', 'src'],
            CXXFLAGS = ['/std:c++14', '/O2', '/permissive-', '/EHsc',
                '/D__PRETTY_FUNCTION__=__FUNCSIG__',
            ]
        ),

        cog_env = dict(),
    )

elif sys.platform in ['darwin']:
    default_cfg = dict(
        unittest_env = dict(
            CXX = 'clang++',
            CPPPATH = ['external', 'src'],
            CXXFLAGS = ['-std=c++14', '-Wall', '-g', '-O2'],
        ),

        cog_env = dict(),
    )

else:
    raise RuntimeError('Unsupported platform %s' % sys.platform)


#-----------------------------------------------------------------------------
# detect site config

site_cfg = File("site.cfg").path

if not os.path.isfile(site_cfg):

    cfg_out = RawConfigParser()

    for s in default_cfg.keys():

        cfg_out.add_section(s)

        data = default_cfg[s]

        for k,v in data.items():

            cfg_out.set(s, k, repr(v))

    with open(site_cfg, 'w') as fd:
        cfg_out.write(fd)
        print("Wrote default site configuration")
        print("    out: %s" % site_cfg)


#-----------------------------------------------------------------------------
# read in site configuration

print("Reading site configuration")
print("    in: %s" % site_cfg)

site_config = RawConfigParser()

with open(site_cfg, 'r') as fd:
    site_config.readfp(fd)


#-----------------------------------------------------------------------------
# create build environments

print("Creating unittest build environment")

unittest_env = Environment()

for k,v in site_config.items('unittest_env'):

    k = k.upper()
    v = eval(v)

    print('    %10s = %s' % (k, repr(v)))

    unittest_env[k] = v

cog_env = Environment()

for k,v in site_config.items('cog_env'):

    k = k.upper()
    v = eval(v)

    print('    %10s = %s' % (k, repr(v)))

    cog_env[k] = v

cog_env.Tool("Cog")

Export("cog_env")


#-----------------------------------------------------------------------------
# import .scons scripts

SConscript("src/numcpp/numcpp.scons")

#-----------------------------------------------------------------------------
# handle coverage

do_coverage = GetOption("coverage")

if do_coverage:

    assert "g++" == unittest_env['CXX'], "coverage only suported for g++ compiler"

    print("Adding coverage flags")

    unittest_env.AppendUnique(
        CXXFLAGS = ['-g', '-O0', '--coverage', '-fno-inline','-fno-inline-small-functions', '-fno-default-inline'],
        LINKFLAGS = ['--coverage'],
        PATH = os.environ['PATH'],
    )

    CXXFLAGS = unittest_env['CXXFLAGS']

    for flag in ['-O1', '-O2', '-O3']:
        if flag in CXXFLAGS:
            CXXFLAGS.remove(flag)

    for k in ['CXXFLAGS', 'LINKFLAGS']:
        v = unittest_env[k]
        print('    %10s = %s' % (k, repr(v)))

#-----------------------------------------------------------------------------
# Does the c++ compiler work?

conf = Configure(unittest_env)

# c++ compiler

if not conf.CheckCXX():
    import sys
    raise RuntimeError('numcpp requires a working c++ compiler')

# c++14 support

sys.stdout.write("Checking for c++14 support ...")

tmp = conf.TryCompile(
    """
    int x = 0b0010;
    """,
    '.cpp'
)

if tmp:
    print(" yes")

else:
    print(" no")
    raise RuntimeError("c++14 support is required")

conf.Finish()


#-----------------------------------------------------------------------------
# building unittests

src = Glob('src/numcpp/tests/test_*.cpp')
src.append(File('src/executables/unittests.cpp'))

ut = unittest_env.Program('src/executables/unittests', src)[0]

unittest_env.Default(ut)

#-----------------------------------------------------------------------------
# building demo program
if not do_coverage and not do_test:

    for prog in ['demo', 'timing']:
        p = unittest_env.Program(prog, "src/executables/{}.cpp".format(prog))
        unittest_env.Default(p)

#-----------------------------------------------------------------------------
# extra cleaning

if GetOption("clean"):

    for f in src:

        base = os.path.splitext(f.path)[0]

        unittest_env.Clean(ut, base + ".gcda")
        unittest_env.Clean(ut, base + ".gcno")
        unittest_env.Clean(ut, 'coverage.info')
        unittest_env.Clean(ut, 'coverage')

#-----------------------------------------------------------------------------
# execute unittest

if do_test:

    options = ""

    if GetOption("abort"):
        options += " --abort"

    cmd = "%s %s" % (ut.path, options)

    run_ut = Command("test", None, cmd)

    Depends(run_ut, ut)
    Default(run_ut)
    AlwaysBuild(run_ut)

    num_jobs = GetOption('num_jobs')

    sources = Glob('src/numcpp/tests/compile_error*.cpp')

    def trycompile(target, source, env):
        target = target[0].path
        obj_name = source[0].path + '.o'
        source = source[0].path
        cmd = env['CXXCOM']
        cmd = cmd.replace('$TARGET', obj_name)
        cmd = cmd.replace('$SOURCES', source)
        cmd = env.subst(cmd)
        import subprocess
        p = subprocess.Popen(
            cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT
        )
        out = p.stdout.read().decode('utf-8')
        p.communicate()
        if p.returncode:
            with open(target, 'w') as fout:
                fout.write('Failed to comple as expected:\n\n')
                fout.write(f'{cmd}\n\n')
                fout.write(f'{out}\n\n')
            return 0

        with open(target, 'w') as fout:
            fout.write('Compiled successfully but was expected to fail!\n\n')
            fout.write(f'{cmd}\n\n')
            fout.write(f'{out}\n\n')
        return 1

    for src in sources:
        obj_name = str(src) + '.txt'

        def strfunction(target, source, env):
            return "Asserting this doesn't compile: %s" % source[0]

        action = unittest_env.Action(trycompile, strfunction = strfunction)
        obj = unittest_env.Command(obj_name, src, action)
        unittest_env.Clean(ut, obj)
        unittest_env.Depends(obj, run_ut)
        unittest_env.Default(obj)



#-----------------------------------------------------------------------------
# produce unitest coverage

if do_coverage:

    base = os.path.splitext(ut.path)[0]

    targets = [
        base + '.gcda',
    ]

    # execution sequence
    actions = [
        'lcov --base-directory . --directory . --zerocounters -q',
        ut.path,
        'lcov --base-directory . --directory . -c -o tmp1.info',
        'lcov --remove tmp1.info "/usr*" -o tmp2.info',
        'lcov --remove tmp2.info "*/external/*" -o coverage.info',
        'rm -rf coverage tmp1.info tmp2.info',

#~        # Lcov v1.14 on ubuntu 20.04 or later
#~        'lcov --base-directory . '
#~            '--directory . '
#~            '--exclude "*/external/*" '
#~            '--exclude "/usr/*" '
#~            '--capture -o coverage.info',

        'genhtml -o coverage -t "unittest coverage" --demangle-cpp --num-spaces 4 coverage.info',
        'echo Open coverage/index.html',
    ]

    run_ut = Command(
        target = targets,
        source = ut.path,
        action = actions,
    )

    Default(run_ut)

    Depends(run_ut, ut)

    AlwaysBuild(run_ut)
